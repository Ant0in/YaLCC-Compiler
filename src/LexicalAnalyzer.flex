
/**
 *
 * Scanner class, generated by JFlex.
 * Function yylex() is the important one as it reads the file and returns the next matched token.
 *
 */

%%

%class LexicalAnalyzer
%unicode
%public
%line
%column
%type Symbol

%{

/**
 * Builds a {@link Symbol} with the given lexical unit, using
 * the current position in the source (line and column) and
 * the matched text (yytext()) as its value.
 *
 * @param type the lexical unit (token type) to associate with this symbol
 * @return a new {@link Symbol} representing the matched token
 */
private Symbol symbol(LexicalUnit type) {
    return new Symbol(type, yyline, yycolumn, yytext());
}

/**
 * Builds a {@link Symbol} with the given lexical unit and a specific value,
 * using the current position in the source (line and column).
 *
 * This is used for tokens that carry semantic values (e.g., numbers, identifiers).
 *
 * @param type  the lexical unit (token type)
 * @param value the semantic value of the token (e.g., Integer, String)
 * @return a new {@link Symbol} representing the matched token with its value
 */
private Symbol symbol(LexicalUnit type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
}

%}

/* Regex */

AlphaUpperCase    = [A-Z]
AlphaLowerCase    = [a-z]
Alpha             = {AlphaUpperCase}|{AlphaLowerCase}
Numeric           = [0-9]
AlphaNumeric      = {Alpha}|{Numeric}
LowerAlphaNumeric = {AlphaLowerCase}|{Numeric}

BadInteger     = (0[0-9]+)
Integer        = ([1-9][0-9]*)|0
ProgName       = {AlphaUpperCase}({Alpha}|"_")*
VarName        = ({AlphaLowerCase})({AlphaNumeric})*
LineFeed       = "\n"
CarriageReturn = "\r"
EndLine        = ({LineFeed}{CarriageReturn}?) | ({CarriageReturn}{LineFeed}?)
Space          = (\t | \f | " ")
Spaces         = {Space}+
Separator      = ({Spaces}) | ({EndLine}) 
Any            = ([^\n\r])*
UpToEnd        = ({Any}{EndLine}) | ({EndLine})

%xstate YYINITIAL, LONGCOMMENTS

%%

/* Long and short comments */

<YYINITIAL> "!!"           { yybegin(LONGCOMMENTS); }
<YYINITIAL> "$"{UpToEnd}   { }

<LONGCOMMENTS> "!!"        { yybegin(YYINITIAL); }
<LONGCOMMENTS> <<EOF>>     { throw new RuntimeException("A comment is never closed at line " + (yyline+1) + ", column " + (yycolumn+1) + ": '" + yytext() + "'"); }
<LONGCOMMENTS> [^]         { }

/* Keywords and symbols */

<YYINITIAL> "Prog"         { return symbol(LexicalUnit.PROG); }
<YYINITIAL> "Is"           { return symbol(LexicalUnit.IS); }
<YYINITIAL> "End"          { return symbol(LexicalUnit.END); }
<YYINITIAL> "If"           { return symbol(LexicalUnit.IF); }
<YYINITIAL> "Then"         { return symbol(LexicalUnit.THEN); }
<YYINITIAL> "Else"         { return symbol(LexicalUnit.ELSE); }
<YYINITIAL> "While"        { return symbol(LexicalUnit.WHILE); }
<YYINITIAL> "Do"           { return symbol(LexicalUnit.DO); }
<YYINITIAL> "Print"        { return symbol(LexicalUnit.PRINT); }
<YYINITIAL> "Input"        { return symbol(LexicalUnit.INPUT); }

<YYINITIAL> "="            { return symbol(LexicalUnit.ASSIGN); }
<YYINITIAL> ";"            { return symbol(LexicalUnit.SEMI); }
<YYINITIAL> "("            { return symbol(LexicalUnit.LPAREN); }
<YYINITIAL> ")"            { return symbol(LexicalUnit.RPAREN); }
<YYINITIAL> "{"            { return symbol(LexicalUnit.LBRACK); }
<YYINITIAL> "}"            { return symbol(LexicalUnit.RBRACK); }

<YYINITIAL> "+"            { return symbol(LexicalUnit.PLUS); }
<YYINITIAL> "-"            { return symbol(LexicalUnit.MINUS); }
<YYINITIAL> "*"            { return symbol(LexicalUnit.TIMES); }
<YYINITIAL> "/"            { return symbol(LexicalUnit.DIVIDE); }

<YYINITIAL> "=="           { return symbol(LexicalUnit.EQUAL); }
<YYINITIAL> "<="           { return symbol(LexicalUnit.SMALEQ); }
<YYINITIAL> "<"            { return symbol(LexicalUnit.SMALLER); }
<YYINITIAL> "->"           { return symbol(LexicalUnit.IMPLIES); }
<YYINITIAL> "|"            { return symbol(LexicalUnit.PIPE); }

<YYINITIAL> {BadInteger}   { System.err.println("Warning! Numbers with leading zeros are deprecated: " + yytext()); return symbol(LexicalUnit.NUMBER, Integer.valueOf(yytext())); }
<YYINITIAL> {Integer}      { return symbol(LexicalUnit.NUMBER, Integer.valueOf(yytext())); }
<YYINITIAL> {ProgName}     { return symbol(LexicalUnit.PROGNAME, yytext()); }
<YYINITIAL> {VarName}      { return symbol(LexicalUnit.VARNAME, yytext()); }
<YYINITIAL> {Separator}    { }

<YYINITIAL> <<EOF>>        { return symbol(LexicalUnit.EOS); }

/* Out of tokens */
<YYINITIAL> [^]            { throw new RuntimeException("Unknown token at line " + (yyline+1) + ", column " + (yycolumn+1) + ": '" + yytext() + "'"); }

